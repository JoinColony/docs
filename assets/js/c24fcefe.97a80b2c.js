"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3902],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),s=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(d.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),m=s(n),u=r,N=m["".concat(d,".").concat(u)]||m[u]||k[u]||l;return n?a.createElement(N,i(i({ref:e},p),{},{components:n})):a.createElement(N,i({ref:e},p))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5343:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={},i="Colony Network (`IColonyNetwork`)",o={unversionedId:"colonynetwork/interfaces/icolonynetwork",id:"colonynetwork/interfaces/icolonynetwork",title:"Colony Network (`IColonyNetwork`)",description:"Interface Methods",source:"@site/docs/colonynetwork/interfaces/icolonynetwork.md",sourceDirName:"colonynetwork/interfaces",slug:"/colonynetwork/interfaces/icolonynetwork",permalink:"/docs/docs/colonynetwork/interfaces/icolonynetwork",draft:!1,editUrl:"https://github.com/JoinColony/colonyNetwork/edit/develop/docs/interfaces/icolonynetwork.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Colony (`IColony`)",permalink:"/docs/docs/colonynetwork/interfaces/icolony"},next:{title:"Ether Router (`IEtherRouter`)",permalink:"/docs/docs/colonynetwork/interfaces/ietherrouter"}},d={},s=[{value:"Interface Methods",id:"interface-methods",level:2},{value:"\u25b8 <strong><code>addColonyVersion(uint256 _version, address _resolver)</code></strong>",id:"-addcolonyversionuint256-_version-address-_resolver",level:3},{value:"\u25b8 <strong><code>addExtensionToNetwork(bytes32 extensionId, address resolver)</code></strong>",id:"-addextensiontonetworkbytes32-extensionid-address-resolver",level:3},{value:"\u25b8 <strong><code>addSkill(uint256 _parentSkillId):uint256 skillId</code></strong>",id:"-addskilluint256-_parentskilliduint256-skillid",level:3},{value:"\u25b8 <strong><code>addr(bytes32 node):address address</code></strong>",id:"-addrbytes32-nodeaddress-address",level:3},{value:"\u25b8 <strong><code>appendReputationUpdateLog(address _user, int256 _amount, uint256 _skillId)</code></strong>",id:"-appendreputationupdatelogaddress-_user-int256-_amount-uint256-_skillid",level:3},{value:"\u25b8 <strong><code>burnUnneededRewards(uint256 _amount)</code></strong>",id:"-burnunneededrewardsuint256-_amount",level:3},{value:"\u25b8 <strong><code>calculateMinerWeight(uint256 _timeStaked, uint256 _submissonIndex):uint256 minerWeight</code></strong>",id:"-calculateminerweightuint256-_timestaked-uint256-_submissonindexuint256-minerweight",level:3},{value:"\u25b8 <strong><code>claimMiningReward(address _recipient)</code></strong>",id:"-claimminingrewardaddress-_recipient",level:3},{value:"\u25b8 <strong><code>createColony(address _tokenAddress):address colonyAddress</code></strong>",id:"-createcolonyaddress-_tokenaddressaddress-colonyaddress",level:3},{value:"\u25b8 <strong><code>createColony(address _tokenAddress, uint256 _version, string memory _colonyName):address colonyAddress</code></strong>",id:"-createcolonyaddress-_tokenaddress-uint256-_version-string-memory-_colonynameaddress-colonyaddress",level:3},{value:"\u25b8 <strong><code>createColony(address _tokenAddress, uint256 _version, string memory _colonyName, string memory _metadata):address colonyAddress</code></strong>",id:"-createcolonyaddress-_tokenaddress-uint256-_version-string-memory-_colonyname-string-memory-_metadataaddress-colonyaddress",level:3},{value:"\u25b8 <strong><code>createColony(address _tokenAddress, uint256 _version, string memory _colonyName, string memory _orbitdb, bool _useExtensionManager):address colonyAddress</code></strong>",id:"-createcolonyaddress-_tokenaddress-uint256-_version-string-memory-_colonyname-string-memory-_orbitdb-bool-_useextensionmanageraddress-colonyaddress",level:3},{value:"\u25b8 <strong><code>createMetaColony(address _tokenAddress)</code></strong>",id:"-createmetacolonyaddress-_tokenaddress",level:3},{value:"\u25b8 <strong><code>deployTokenAuthority(address _token, address _colony, address[] memory allowedToTransfer):address tokenAuthority</code></strong>",id:"-deploytokenauthorityaddress-_token-address-_colony-address-memory-allowedtotransferaddress-tokenauthority",level:3},{value:"\u25b8 <strong><code>deployTokenViaNetwork(string memory _name, string memory _symbol, uint8 _decimals):address token</code></strong>",id:"-deploytokenvianetworkstring-memory-_name-string-memory-_symbol-uint8-_decimalsaddress-token",level:3},{value:"\u25b8 <strong><code>deprecateExtension(bytes32 extensionId, bool deprecated)</code></strong>",id:"-deprecateextensionbytes32-extensionid-bool-deprecated",level:3},{value:"\u25b8 <strong><code>deprecateSkill(uint256 _skillId)</code></strong>",id:"-deprecateskilluint256-_skillid",level:3},{value:"\u25b8 <strong><code>deprecateSkill(uint256 _skillId, bool _deprecated):bool changed</code></strong>",id:"-deprecateskilluint256-_skillid-bool-_deprecatedbool-changed",level:3},{value:"\u25b8 <strong><code>getChildSkillId(uint256 _skillId, uint256 _childSkillIndex):uint256 skillId</code></strong>",id:"-getchildskilliduint256-_skillid-uint256-_childskillindexuint256-skillid",level:3},{value:"\u25b8 <strong><code>getColony(uint256 _id):address colonyAddress</code></strong>",id:"-getcolonyuint256-_idaddress-colonyaddress",level:3},{value:"\u25b8 <strong><code>getColonyCount():uint256 count</code></strong>",id:"-getcolonycountuint256-count",level:3},{value:"\u25b8 <strong><code>getColonyVersionResolver(uint256 _version):address resolverAddress</code></strong>",id:"-getcolonyversionresolveruint256-_versionaddress-resolveraddress",level:3},{value:"\u25b8 <strong><code>getCurrentColonyVersion():uint256 version</code></strong>",id:"-getcurrentcolonyversionuint256-version",level:3},{value:"\u25b8 <strong><code>getENSRegistrar():address address</code></strong>",id:"-getensregistraraddress-address",level:3},{value:"\u25b8 <strong><code>getExtensionInstallation(bytes32 extensionId, address colony):address installation</code></strong>",id:"-getextensioninstallationbytes32-extensionid-address-colonyaddress-installation",level:3},{value:"\u25b8 <strong><code>getExtensionResolver(bytes32 extensionId, uint256 version):address resolver</code></strong>",id:"-getextensionresolverbytes32-extensionid-uint256-versionaddress-resolver",level:3},{value:"\u25b8 <strong><code>getFeeInverse():uint256 _feeInverse</code></strong>",id:"-getfeeinverseuint256-_feeinverse",level:3},{value:"\u25b8 <strong><code>getMetaColony():address colonyAddress</code></strong>",id:"-getmetacolonyaddress-colonyaddress",level:3},{value:"\u25b8 <strong><code>getMiningDelegator(address _delegate):address delegator</code></strong>",id:"-getminingdelegatoraddress-_delegateaddress-delegator",level:3},{value:"\u25b8 <strong><code>getMiningResolver():address miningResolverAddress</code></strong>",id:"-getminingresolveraddress-miningresolveraddress",level:3},{value:"\u25b8 <strong><code>getMiningStake(address _user):MiningStake _info</code></strong>",id:"-getminingstakeaddress-_userminingstake-_info",level:3},{value:"\u25b8 <strong><code>getParentSkillId(uint256 _skillId, uint256 _parentSkillIndex):uint256 skillId</code></strong>",id:"-getparentskilliduint256-_skillid-uint256-_parentskillindexuint256-skillid",level:3},{value:"\u25b8 <strong><code>getPayoutWhitelist(address _token):bool status</code></strong>",id:"-getpayoutwhitelistaddress-_tokenbool-status",level:3},{value:"\u25b8 <strong><code>getProfileDBAddress(bytes32 node):string orbitDB</code></strong>",id:"-getprofiledbaddressbytes32-nodestring-orbitdb",level:3},{value:"\u25b8 <strong><code>getReplacementReputationUpdateLogEntry(address _reputationMiningCycle, uint256 _id):ReputationLogEntry reputationLogEntry</code></strong>",id:"-getreplacementreputationupdatelogentryaddress-_reputationminingcycle-uint256-_idreputationlogentry-reputationlogentry",level:3},{value:"\u25b8 <strong><code>getReplacementReputationUpdateLogsExist(address _reputationMiningCycle):bool exists</code></strong>",id:"-getreplacementreputationupdatelogsexistaddress-_reputationminingcyclebool-exists",level:3},{value:"\u25b8 <strong><code>getReputationMiningCycle(bool _active):address repMiningCycleAddress</code></strong>",id:"-getreputationminingcyclebool-_activeaddress-repminingcycleaddress",level:3},{value:"\u25b8 <strong><code>getReputationMiningCycleReward():uint256 amount</code></strong>",id:"-getreputationminingcyclerewarduint256-amount",level:3},{value:"\u25b8 <strong><code>getReputationMiningSkillId():uint256 skillId</code></strong>",id:"-getreputationminingskilliduint256-skillid",level:3},{value:"\u25b8 <strong><code>getReputationRootHash():bytes32 rootHash</code></strong>",id:"-getreputationroothashbytes32-roothash",level:3},{value:"\u25b8 <strong><code>getReputationRootHashNLeaves():uint256 nLeaves</code></strong>",id:"-getreputationroothashnleavesuint256-nleaves",level:3},{value:"\u25b8 <strong><code>getReputationRootHashNNodes():uint256 nNodes</code></strong>",id:"-getreputationroothashnnodesuint256-nnodes",level:3},{value:"\u25b8 <strong><code>getSkill(uint256 _skillId):Skill skill</code></strong>",id:"-getskilluint256-_skillidskill-skill",level:3},{value:"\u25b8 <strong><code>getSkillCount():uint256 count</code></strong>",id:"-getskillcountuint256-count",level:3},{value:"\u25b8 <strong><code>getTokenLocking():address lockingAddress</code></strong>",id:"-gettokenlockingaddress-lockingaddress",level:3},{value:"\u25b8 <strong><code>initialise(address _resolver, uint256 _version)</code></strong>",id:"-initialiseaddress-_resolver-uint256-_version",level:3},{value:"\u25b8 <strong><code>initialiseReputationMining()</code></strong>",id:"-initialisereputationmining",level:3},{value:"\u25b8 <strong><code>initialiseRootLocalSkill():uint256 rootLocalSkillId</code></strong>",id:"-initialiserootlocalskilluint256-rootlocalskillid",level:3},{value:"\u25b8 <strong><code>installExtension(bytes32 extensionId, uint256 version)</code></strong>",id:"-installextensionbytes32-extensionid-uint256-version",level:3},{value:"\u25b8 <strong><code>isColony(address _colony):bool addressIsColony</code></strong>",id:"-iscolonyaddress-_colonybool-addressiscolony",level:3},{value:"\u25b8 <strong><code>lookupRegisteredENSDomain(address addr):string domain</code></strong>",id:"-lookupregisteredensdomainaddress-addrstring-domain",level:3},{value:"\u25b8 <strong><code>punishStakers(address[] memory _stakers, uint256 _amount)</code></strong>",id:"-punishstakersaddress-memory-_stakers-uint256-_amount",level:3},{value:"\u25b8 <strong><code>registerColonyLabel(string memory colonyName, string memory orbitdb)</code></strong>",id:"-registercolonylabelstring-memory-colonyname-string-memory-orbitdb",level:3},{value:"\u25b8 <strong><code>registerUserLabel(string memory username, string memory orbitdb)</code></strong>",id:"-registeruserlabelstring-memory-username-string-memory-orbitdb",level:3},{value:"\u25b8 <strong><code>reward(address _recipient, uint256 _amount)</code></strong>",id:"-rewardaddress-_recipient-uint256-_amount",level:3},{value:"\u25b8 <strong><code>setFeeInverse(uint256 _feeInverse)</code></strong>",id:"-setfeeinverseuint256-_feeinverse",level:3},{value:"\u25b8 <strong><code>setMiningDelegate(address _delegate, bool _allowed)</code></strong>",id:"-setminingdelegateaddress-_delegate-bool-_allowed",level:3},{value:"\u25b8 <strong><code>setMiningResolver(address miningResolverAddress)</code></strong>",id:"-setminingresolveraddress-miningresolveraddress",level:3},{value:"\u25b8 <strong><code>setPayoutWhitelist(address _token, bool _status)</code></strong>",id:"-setpayoutwhitelistaddress-_token-bool-_status",level:3},{value:"\u25b8 <strong><code>setReplacementReputationUpdateLogEntry(address _reputationMiningCycle, uint256 _id, address _user, int _amount, uint256 _skillId, address _colony, uint128 _nUpdates, uint128 _nPreviousUpdates)</code></strong>",id:"-setreplacementreputationupdatelogentryaddress-_reputationminingcycle-uint256-_id-address-_user-int-_amount-uint256-_skillid-address-_colony-uint128-_nupdates-uint128-_npreviousupdates",level:3},{value:"\u25b8 <strong><code>setReputationMiningCycleReward(uint256 _amount)</code></strong>",id:"-setreputationminingcyclerewarduint256-_amount",level:3},{value:"\u25b8 <strong><code>setReputationRootHash(bytes32 newHash, uint256 newNLeaves, address[] memory stakers)</code></strong>",id:"-setreputationroothashbytes32-newhash-uint256-newnleaves-address-memory-stakers",level:3},{value:"\u25b8 <strong><code>setTokenLocking(address _tokenLockingAddress)</code></strong>",id:"-settokenlockingaddress-_tokenlockingaddress",level:3},{value:"\u25b8 <strong><code>setupRegistrar(address _ens, bytes32 _rootNode)</code></strong>",id:"-setupregistraraddress-_ens-bytes32-_rootnode",level:3},{value:"\u25b8 <strong><code>stakeForMining(uint256 _amount)</code></strong>",id:"-stakeformininguint256-_amount",level:3},{value:"\u25b8 <strong><code>startNextCycle()</code></strong>",id:"-startnextcycle",level:3},{value:"\u25b8 <strong><code>startTokenAuction(address _token)</code></strong>",id:"-starttokenauctionaddress-_token",level:3},{value:"\u25b8 <strong><code>supportsInterface(bytes4 interfaceID):bool status</code></strong>",id:"-supportsinterfacebytes4-interfaceidbool-status",level:3},{value:"\u25b8 <strong><code>uninstallExtension(bytes32 extensionId)</code></strong>",id:"-uninstallextensionbytes32-extensionid",level:3},{value:"\u25b8 <strong><code>unstakeForMining(uint256 _amount)</code></strong>",id:"-unstakeformininguint256-_amount",level:3},{value:"\u25b8 <strong><code>updateColonyOrbitDB(string memory orbitdb)</code></strong>",id:"-updatecolonyorbitdbstring-memory-orbitdb",level:3},{value:"\u25b8 <strong><code>updateUserOrbitDB(string memory orbitdb)</code></strong>",id:"-updateuserorbitdbstring-memory-orbitdb",level:3},{value:"\u25b8 <strong><code>upgradeExtension(bytes32 extensionId, uint256 newVersion)</code></strong>",id:"-upgradeextensionbytes32-extensionid-uint256-newversion",level:3}],p={toc:s};function k(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"colony-network-icolonynetwork"},"Colony Network (",(0,r.kt)("inlineCode",{parentName:"h1"},"IColonyNetwork"),")"),(0,r.kt)("h2",{id:"interface-methods"},"Interface Methods"),(0,r.kt)("h3",{id:"-addcolonyversionuint256-_version-address-_resolver"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"addColonyVersion(uint256 _version, address _resolver)"))),(0,r.kt)("p",null,"Adds a new Colony contract version and the address of associated ",(0,r.kt)("inlineCode",{parentName:"p"},"_resolver")," contract. Secured function to authorised members. Allowed to be called by the Meta Colony only."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The new Colony contract version")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_resolver"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Resolver")," contract which will be used with the underlying ",(0,r.kt)("inlineCode",{parentName:"td"},"EtherRouter")," contract")))),(0,r.kt)("h3",{id:"-addextensiontonetworkbytes32-extensionid-address-resolver"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"addExtensionToNetwork(bytes32 extensionId, address resolver)"))),(0,r.kt)("p",null,"Add a new extension resolver to the Extensions repository."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Can only be called by the MetaColony.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resolver"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The deployed resolver containing the extension contract logic")))),(0,r.kt)("h3",{id:"-addskilluint256-_parentskilliduint256-skillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"addSkill(uint256 _parentSkillId):uint256 skillId"))),(0,r.kt)("p",null,"Adds a new skill to the global or local skills tree, under skill ",(0,r.kt)("inlineCode",{parentName:"p"},"_parentSkillId"),". Only the Meta Colony is allowed to add a global skill, called via ",(0,r.kt)("inlineCode",{parentName:"p"},"IColony.addGlobalSkill"),". Any colony is allowed to add a local skill and which is associated with a new domain via ",(0,r.kt)("inlineCode",{parentName:"p"},"IColony.addDomain"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Errors if the parent skill does not exist or if this is called by an unauthorised sender.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_parentSkillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the skill under which the new skill will be added. If 0, a global skill is added with no parent.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the added skill")))),(0,r.kt)("h3",{id:"-addrbytes32-nodeaddress-address"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"addr(bytes32 node):address address"))),(0,r.kt)("p",null,"Returns the address the supplied node resolves do, if we are the resolver."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"The namehash of the ENS address being requested")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address the supplied node resolves to")))),(0,r.kt)("h3",{id:"-appendreputationupdatelogaddress-_user-int256-_amount-uint256-_skillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"appendReputationUpdateLog(address _user, int256 _amount, uint256 _skillId)"))),(0,r.kt)("p",null,"Adds a reputation update entry to log."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Errors if it is called by anyone but a colony or if skill with id ",(0,r.kt)("inlineCode",{parentName:"em"},"_skillId")," does not exist or.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_user"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the user for the reputation update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"int256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of reputation change for the update, this can be a negative as well as a positive value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The skill for the reputation update")))),(0,r.kt)("h3",{id:"-burnunneededrewardsuint256-_amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"burnUnneededRewards(uint256 _amount)"))),(0,r.kt)("p",null,"Used to burn tokens that are not needed to pay out rewards (because not every possible defence was made for all submissions)"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Only callable by the active reputation mining cycle")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of CLNY to burn")))),(0,r.kt)("h3",{id:"-calculateminerweightuint256-_timestaked-uint256-_submissonindexuint256-minerweight"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"calculateMinerWeight(uint256 _timeStaked, uint256 _submissonIndex):uint256 minerWeight"))),(0,r.kt)("p",null,"Calculate raw miner weight in WADs."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_timeStaked"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of time (in seconds) that the miner has staked their CLNY")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_submissonIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Index of reputation hash submission (between 0 and 11)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minerWeight"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The weight of miner reward")))),(0,r.kt)("h3",{id:"-claimminingrewardaddress-_recipient"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"claimMiningReward(address _recipient)"))),(0,r.kt)("p",null,"Used by a user to claim any mining rewards due to them. This will place them in their balance or pending balance, as appropriate."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Can be called by anyone, not just _recipient")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_recipient"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The user whose rewards to claim")))),(0,r.kt)("h3",{id:"-createcolonyaddress-_tokenaddressaddress-colonyaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"createColony(address _tokenAddress):address colonyAddress"))),(0,r.kt)("p",null,"Creates a new colony in the network, at version 3"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: This is now deprecated and will be removed in a future version")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_tokenAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of an ERC20 token to serve as the colony token.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the newly created colony")))),(0,r.kt)("h3",{id:"-createcolonyaddress-_tokenaddress-uint256-_version-string-memory-_colonynameaddress-colonyaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"createColony(address _tokenAddress, uint256 _version, string memory _colonyName):address colonyAddress"))),(0,r.kt)("p",null,"Creates a new colony in the network, with an optional ENS name"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: For the colony to mint tokens, token ownership must be transferred to the new colony")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_tokenAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of an ERC20 token to serve as the colony token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The version of colony to deploy (pass 0 for the current version)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_colonyName"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The label to register (if null, no label is registered)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the newly created colony")))),(0,r.kt)("h3",{id:"-createcolonyaddress-_tokenaddress-uint256-_version-string-memory-_colonyname-string-memory-_metadataaddress-colonyaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"createColony(address _tokenAddress, uint256 _version, string memory _colonyName, string memory _metadata):address colonyAddress"))),(0,r.kt)("p",null,"Creates a new colony in the network, with an optional ENS name"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: For the colony to mint tokens, token ownership must be transferred to the new colony")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_tokenAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of an ERC20 token to serve as the colony token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The version of colony to deploy (pass 0 for the current version)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_colonyName"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The label to register (if null, no label is registered)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_metadata"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The metadata associated with the new colony")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the newly created colony")))),(0,r.kt)("h3",{id:"-createcolonyaddress-_tokenaddress-uint256-_version-string-memory-_colonyname-string-memory-_orbitdb-bool-_useextensionmanageraddress-colonyaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"createColony(address _tokenAddress, uint256 _version, string memory _colonyName, string memory _orbitdb, bool _useExtensionManager):address colonyAddress"))),(0,r.kt)("p",null,"Overload of the simpler ",(0,r.kt)("inlineCode",{parentName:"p"},"createColony")," -- creates a new colony in the network with a variety of options, at version 4"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: This is now deprecated and will be removed in a future version")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_tokenAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of an ERC20 token to serve as the colony token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The version of colony to deploy (pass 0 for the current version)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_colonyName"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The label to register (if null, no label is registered)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_orbitdb"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"DEPRECATED Currently a no-op")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_useExtensionManager"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"DEPRECATED Currently a no-op")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the newly created colony")))),(0,r.kt)("h3",{id:"-createmetacolonyaddress-_tokenaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"createMetaColony(address _tokenAddress)"))),(0,r.kt)("p",null,"Create the Meta Colony, same as a normal colony plus the root skill."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_tokenAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the CLNY token")))),(0,r.kt)("h3",{id:"-deploytokenauthorityaddress-_token-address-_colony-address-memory-allowedtotransferaddress-tokenauthority"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"deployTokenAuthority(address _token, address _colony, address[] memory allowedToTransfer):address tokenAuthority"))),(0,r.kt)("p",null,"Called to deploy a token authority"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: This is more expensive than deploying a token directly, but is able to be done via a metatransaction")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_token"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the otken")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_colony"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the colony in control of the token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowedToTransfer"),(0,r.kt)("td",{parentName:"tr",align:null},"address[]"),(0,r.kt)("td",{parentName:"tr",align:null},"An array of addresses that are allowed to transfer the token even if it's locked")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tokenAuthority"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the newly deployed TokenAuthority")))),(0,r.kt)("h3",{id:"-deploytokenvianetworkstring-memory-_name-string-memory-_symbol-uint8-_decimalsaddress-token"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"deployTokenViaNetwork(string memory _name, string memory _symbol, uint8 _decimals):address token"))),(0,r.kt)("p",null,"Called to deploy a token."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: This is more expensive than deploying a token directly, but is able to be done via a metatransaction")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_name"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_symbol"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The short 'ticket' symbol for the token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_decimals"),(0,r.kt)("td",{parentName:"tr",align:null},"uint8"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of decimal places that 1 user-facing token can be divided up in to In the case of ETH, and most tokens, this is 18.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the newly deployed token")))),(0,r.kt)("h3",{id:"-deprecateextensionbytes32-extensionid-bool-deprecated"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"deprecateExtension(bytes32 extensionId, bool deprecated)"))),(0,r.kt)("p",null,"Set the deprecation of an extension in a colony. Can only be called by a Colony."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"deprecated"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to deprecate the extension or not")))),(0,r.kt)("h3",{id:"-deprecateskilluint256-_skillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"deprecateSkill(uint256 _skillId)"))),(0,r.kt)("p",null,"Mark a skill as deprecated which stops new tasks and payments from using it."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: This function is deprecated and will be removed in a future release")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the skill")))),(0,r.kt)("h3",{id:"-deprecateskilluint256-_skillid-bool-_deprecatedbool-changed"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"deprecateSkill(uint256 _skillId, bool _deprecated):bool changed"))),(0,r.kt)("p",null,"Set deprecation status for a skill"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the skill")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_deprecated"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Deprecation status")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"changed"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the deprecated state was changed")))),(0,r.kt)("h3",{id:"-getchildskilliduint256-_skillid-uint256-_childskillindexuint256-skillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getChildSkillId(uint256 _skillId, uint256 _childSkillIndex):uint256 skillId"))),(0,r.kt)("p",null,"Get the id of the child skill at index ",(0,r.kt)("inlineCode",{parentName:"p"},"_childSkillIndex")," for skill with Id ",(0,r.kt)("inlineCode",{parentName:"p"},"_skillId"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the skill")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_childSkillIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Index of the ",(0,r.kt)("inlineCode",{parentName:"td"},"skill.children")," array to get")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Skill Id of the requested child skill")))),(0,r.kt)("h3",{id:"-getcolonyuint256-_idaddress-colonyaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getColony(uint256 _id):address colonyAddress"))),(0,r.kt)("p",null,"Get a colony address by its Id in the network."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_id"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the colony to get")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The colony address, if no colony was found, returns 0x0")))),(0,r.kt)("h3",{id:"-getcolonycountuint256-count"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getColonyCount():uint256 count"))),(0,r.kt)("p",null,"Get the number of colonies in the network."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The colony count")))),(0,r.kt)("h3",{id:"-getcolonyversionresolveruint256-_versionaddress-resolveraddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getColonyVersionResolver(uint256 _version):address resolverAddress"))),(0,r.kt)("p",null,"Get the ",(0,r.kt)("inlineCode",{parentName:"p"},"Resolver")," address for Colony contract version ",(0,r.kt)("inlineCode",{parentName:"p"},"_version"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The Colony contract version")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resolverAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Resolver")," contract")))),(0,r.kt)("h3",{id:"-getcurrentcolonyversionuint256-version"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getCurrentColonyVersion():uint256 version"))),(0,r.kt)("p",null,"Returns the latest Colony contract version. This is the version used to create all new colonies."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The current / latest Colony contract version")))),(0,r.kt)("h3",{id:"-getensregistraraddress-address"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getENSRegistrar():address address"))),(0,r.kt)("p",null,"Returns the address of the ENSRegistrar for the Network."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address the ENSRegistrar resolves to")))),(0,r.kt)("h3",{id:"-getextensioninstallationbytes32-extensionid-address-colonyaddress-installation"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getExtensionInstallation(bytes32 extensionId, address colony):address installation"))),(0,r.kt)("p",null,"Get an extension's installation."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colony"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the colony the extension is installed in")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"installation"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the installed extension")))),(0,r.kt)("h3",{id:"-getextensionresolverbytes32-extensionid-uint256-versionaddress-resolver"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getExtensionResolver(bytes32 extensionId, uint256 version):address resolver"))),(0,r.kt)("p",null,"Get an extension's resolver."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the extension")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resolver"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the deployed resolver")))),(0,r.kt)("h3",{id:"-getfeeinverseuint256-_feeinverse"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getFeeInverse():uint256 _feeInverse"))),(0,r.kt)("p",null,"Return 1 / the fee to pay to the network. e.g. if the fee is 1% (or 0.01), return 100."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_feeInverse"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The inverse of the network fee")))),(0,r.kt)("h3",{id:"-getmetacolonyaddress-colonyaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getMetaColony():address colonyAddress"))),(0,r.kt)("p",null,"Get the Meta Colony address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The Meta colony address, if no colony was found, returns 0x0")))),(0,r.kt)("h3",{id:"-getminingdelegatoraddress-_delegateaddress-delegator"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getMiningDelegator(address _delegate):address delegator"))),(0,r.kt)("p",null,"Called to get the address _delegate is allowed to mine for"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_delegate"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address that wants to mine")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delegator"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address they are allowed to mine on behalf of")))),(0,r.kt)("h3",{id:"-getminingresolveraddress-miningresolveraddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getMiningResolver():address miningResolverAddress"))),(0,r.kt)("p",null,"Get the resolver to be used by new instances of ReputationMiningCycle."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"miningResolverAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the mining cycle resolver currently used by new instances")))),(0,r.kt)("h3",{id:"-getminingstakeaddress-_userminingstake-_info"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getMiningStake(address _user):MiningStake _info"))),(0,r.kt)("p",null,"returns how much CLNY _user has staked for the purposes of reputation mining"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_user"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The user to query")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_info"),(0,r.kt)("td",{parentName:"tr",align:null},"MiningStake"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount staked and the timestamp the stake was made at.")))),(0,r.kt)("h3",{id:"-getparentskilliduint256-_skillid-uint256-_parentskillindexuint256-skillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getParentSkillId(uint256 _skillId, uint256 _parentSkillIndex):uint256 skillId"))),(0,r.kt)("p",null,"Get the id of the parent skill at index ",(0,r.kt)("inlineCode",{parentName:"p"},"_parentSkillIndex")," for skill with Id ",(0,r.kt)("inlineCode",{parentName:"p"},"_skillId"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the skill")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_parentSkillIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Index of the ",(0,r.kt)("inlineCode",{parentName:"td"},"skill.parents")," array to get Note that not all parent skill ids are stored here. See ",(0,r.kt)("inlineCode",{parentName:"td"},"Skill.parents")," member for definition on which parents are stored")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Skill Id of the requested parent skill")))),(0,r.kt)("h3",{id:"-getpayoutwhitelistaddress-_tokenbool-status"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getPayoutWhitelist(address _token):bool status"))),(0,r.kt)("p",null,"Get a token's status in the payout whitelist"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_token"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The token being queried")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"status"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Will be ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if token is whitelisted")))),(0,r.kt)("h3",{id:"-getprofiledbaddressbytes32-nodestring-orbitdb"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getProfileDBAddress(bytes32 node):string orbitDB"))),(0,r.kt)("p",null,"Retrieve the orbitdb address corresponding to a registered account."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"node"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"The Namehash of the account being queried.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orbitDB"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"A string containing the address of the orbit database")))),(0,r.kt)("h3",{id:"-getreplacementreputationupdatelogentryaddress-_reputationminingcycle-uint256-_idreputationlogentry-reputationlogentry"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReplacementReputationUpdateLogEntry(address _reputationMiningCycle, uint256 _id):ReputationLogEntry reputationLogEntry"))),(0,r.kt)("p",null,"Get a replacement log entry (if set) for the log entry ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," in the mining cycle that was at the address ",(0,r.kt)("inlineCode",{parentName:"p"},"_reputationMiningCycle"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_reputationMiningCycle"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the reputation mining cycle we are asking about")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_id"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The log entry number we wish to see if there is a replacement for")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reputationLogEntry"),(0,r.kt)("td",{parentName:"tr",align:null},"ReputationLogEntry"),(0,r.kt)("td",{parentName:"tr",align:null},"ReputationLogEntry instance with the details of the log entry (if it exists)")))),(0,r.kt)("h3",{id:"-getreplacementreputationupdatelogsexistaddress-_reputationminingcyclebool-exists"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReplacementReputationUpdateLogsExist(address _reputationMiningCycle):bool exists"))),(0,r.kt)("p",null,"Used by the client to avoid doubling the number of RPC calls when syncing from scratch."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_reputationMiningCycle"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The reputation mining cycle address we want to know if any entries have been replaced in.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exists"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean indicating whether there is a replacement log")))),(0,r.kt)("h3",{id:"-getreputationminingcyclebool-_activeaddress-repminingcycleaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReputationMiningCycle(bool _active):address repMiningCycleAddress"))),(0,r.kt)("p",null,"Get the address of either the active or inactive reputation mining cycle, based on ",(0,r.kt)("inlineCode",{parentName:"p"},"active"),". The active reputation mining cycle is the one currently under consideration by reputation miners. The inactive reputation cycle is the one with the log that is being appended to."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_active"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the user wants the active or inactive reputation mining cycle")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"repMiningCycleAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"address of active or inactive ReputationMiningCycle")))),(0,r.kt)("h3",{id:"-getreputationminingcyclerewarduint256-amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReputationMiningCycleReward():uint256 amount"))),(0,r.kt)("p",null,"Called to get the total per-cycle reputation mining reward."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The CLNY awarded per mining cycle to the miners")))),(0,r.kt)("h3",{id:"-getreputationminingskilliduint256-skillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReputationMiningSkillId():uint256 skillId"))),(0,r.kt)("p",null,"Get the ",(0,r.kt)("inlineCode",{parentName:"p"},"skillId")," of the reputation mining skill. Only set once the metacolony is set up."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"skillId")," of the reputation mining skill.")))),(0,r.kt)("h3",{id:"-getreputationroothashbytes32-roothash"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReputationRootHash():bytes32 rootHash"))),(0,r.kt)("p",null,"Get the root hash of the current reputation state tree."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rootHash"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"The current Reputation Root Hash")))),(0,r.kt)("h3",{id:"-getreputationroothashnleavesuint256-nleaves"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReputationRootHashNLeaves():uint256 nLeaves"))),(0,r.kt)("p",null,"Get the number of leaves in the current reputation state tree."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: I cannot see a reason why a user's client would need to call this - only stored to help with some edge cases in reputation mining dispute resolution.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nLeaves"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256 The number of leaves in the state tree")))),(0,r.kt)("h3",{id:"-getreputationroothashnnodesuint256-nnodes"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getReputationRootHashNNodes():uint256 nNodes"))),(0,r.kt)("p",null,"Get the number of leaves in the current reputation state tree."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Deprecated, replaced by getReputationRootHashNLeaves which does the same thing but is more accurately named.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nNodes"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256 The number of leaves in the state tree")))),(0,r.kt)("h3",{id:"-getskilluint256-_skillidskill-skill"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getSkill(uint256 _skillId):Skill skill"))),(0,r.kt)("p",null,"Get the ",(0,r.kt)("inlineCode",{parentName:"p"},"nParents")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nChildren")," of skill with id ",(0,r.kt)("inlineCode",{parentName:"p"},"_skillId"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the skill")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"skill"),(0,r.kt)("td",{parentName:"tr",align:null},"Skill"),(0,r.kt)("td",{parentName:"tr",align:null},"The Skill struct")))),(0,r.kt)("h3",{id:"-getskillcountuint256-count"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getSkillCount():uint256 count"))),(0,r.kt)("p",null,"Get the number of skills in the network including both global and local skills."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The skill count")))),(0,r.kt)("h3",{id:"-gettokenlockingaddress-lockingaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"getTokenLocking():address lockingAddress"))),(0,r.kt)("p",null,"Get token locking contract address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lockingAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Token locking contract address")))),(0,r.kt)("h3",{id:"-initialiseaddress-_resolver-uint256-_version"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"initialise(address _resolver, uint256 _version)"))),(0,r.kt)("p",null,"Initialises the colony network by setting the first Colony version resolver to ",(0,r.kt)("inlineCode",{parentName:"p"},"_resolver")," address."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Only allowed to be run once, by the Network owner before any Colony versions are added.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_resolver"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the resolver for Colony contract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the Colony contract the resolver represents")))),(0,r.kt)("h3",{id:"-initialisereputationmining"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"initialiseReputationMining()"))),(0,r.kt)("p",null,"Creates initial inactive reputation mining cycle."),(0,r.kt)("h3",{id:"-initialiserootlocalskilluint256-rootlocalskillid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"initialiseRootLocalSkill():uint256 rootLocalSkillId"))),(0,r.kt)("p",null,"Initialise the local skills tree for a colony"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rootLocalSkillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The root local skill")))),(0,r.kt)("h3",{id:"-installextensionbytes32-extensionid-uint256-version"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"installExtension(bytes32 extensionId, uint256 version)"))),(0,r.kt)("p",null,"Install an extension in a colony. Can only be called by a Colony."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"version"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the extension to install")))),(0,r.kt)("h3",{id:"-iscolonyaddress-_colonybool-addressiscolony"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"isColony(address _colony):bool addressIsColony"))),(0,r.kt)("p",null,"Check if specific address is a colony created on colony network."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_colony"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the colony")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"addressIsColony"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"true if specified address is a colony, otherwise false")))),(0,r.kt)("h3",{id:"-lookupregisteredensdomainaddress-addrstring-domain"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"lookupRegisteredENSDomain(address addr):string domain"))),(0,r.kt)("p",null,"Reverse lookup a username from an address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"addr"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address we wish to find the corresponding ENS domain for (if any)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"domain"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"A string containing the colony-based ENS name corresponding to addr")))),(0,r.kt)("h3",{id:"-punishstakersaddress-memory-_stakers-uint256-_amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"punishStakers(address[] memory _stakers, uint256 _amount)"))),(0,r.kt)("p",null,"Function called to punish people who staked against a new reputation root hash that turned out to be incorrect."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: While external, it can only be called successfully by the current ReputationMiningCycle.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_stakers"),(0,r.kt)("td",{parentName:"tr",align:null},"address[]"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of the addresses of stakers to punish")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of stake to slash")))),(0,r.kt)("h3",{id:"-registercolonylabelstring-memory-colonyname-string-memory-orbitdb"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"registerColonyLabel(string memory colonyName, string memory orbitdb)"))),(0,r.kt)("p",null,'Register a "colony.joincolony.eth" label. Can only be called by a Colony.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colonyName"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The label to register.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orbitdb"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the orbitDB database associated with the colony name")))),(0,r.kt)("h3",{id:"-registeruserlabelstring-memory-username-string-memory-orbitdb"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"registerUserLabel(string memory username, string memory orbitdb)"))),(0,r.kt)("p",null,'Register a "user.joincolony.eth" label.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"username"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The label to register")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orbitdb"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the orbitDB database associated with the user profile")))),(0,r.kt)("h3",{id:"-rewardaddress-_recipient-uint256-_amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"reward(address _recipient, uint256 _amount)"))),(0,r.kt)("p",null,"Used to track that a user is eligible to claim a reward"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Only callable by the active reputation mining cycle")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_recipient"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address receiving the award")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of CLNY to be awarded")))),(0,r.kt)("h3",{id:"-setfeeinverseuint256-_feeinverse"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setFeeInverse(uint256 _feeInverse)"))),(0,r.kt)("p",null,"Set the colony network fee to pay. e.g. if the fee is 1% (or 0.01), pass 100 as ",(0,r.kt)("inlineCode",{parentName:"p"},"_feeInverse"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_feeInverse"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The inverse of the network fee to set")))),(0,r.kt)("h3",{id:"-setminingdelegateaddress-_delegate-bool-_allowed"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setMiningDelegate(address _delegate, bool _allowed)"))),(0,r.kt)("p",null,"Called to give or remove another address's permission to mine on your behalf"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_delegate"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address you're giving or removing permission from")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_allowed"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether they are allowed (true) or not (false) to mine on your behalf")))),(0,r.kt)("h3",{id:"-setminingresolveraddress-miningresolveraddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setMiningResolver(address miningResolverAddress)"))),(0,r.kt)("p",null,"Set the resolver to be used by new instances of ReputationMiningCycle."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"miningResolverAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the Resolver contract with the functions correctly wired.")))),(0,r.kt)("h3",{id:"-setpayoutwhitelistaddress-_token-bool-_status"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setPayoutWhitelist(address _token, bool _status)"))),(0,r.kt)("p",null,"Set a token's status in the payout whitelist"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_token"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The token being set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_status"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"The whitelist status")))),(0,r.kt)("h3",{id:"-setreplacementreputationupdatelogentryaddress-_reputationminingcycle-uint256-_id-address-_user-int-_amount-uint256-_skillid-address-_colony-uint128-_nupdates-uint128-_npreviousupdates"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setReplacementReputationUpdateLogEntry(address _reputationMiningCycle, uint256 _id, address _user, int _amount, uint256 _skillId, address _colony, uint128 _nUpdates, uint128 _nPreviousUpdates)"))),(0,r.kt)("p",null,"Set a replacement log entry if we're in recovery mode."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Note that strictly, ",(0,r.kt)("inlineCode",{parentName:"em"},"_nUpdates")," and ",(0,r.kt)("inlineCode",{parentName:"em"},"_nPreviousUpdates")," don't need to be set - they're only used during dispute resolution, which these replacement log entries are never used for. However, for ease of resyncing the client, we have decided to include them for now.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_reputationMiningCycle"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the reputation mining cycle that the log was in.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_id"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of the log entry in the reputation mining cycle in question.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_user"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the user earning / losing the reputation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of reputation being earned / lost")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_skillId"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the origin skill for the reputation update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_colony"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the colony being updated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_nUpdates"),(0,r.kt)("td",{parentName:"tr",align:null},"uint128"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of updates the log entry corresponds to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_nPreviousUpdates"),(0,r.kt)("td",{parentName:"tr",align:null},"uint128"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of updates in the log before this entry")))),(0,r.kt)("h3",{id:"-setreputationminingcyclerewarduint256-_amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setReputationMiningCycleReward(uint256 _amount)"))),(0,r.kt)("p",null,"Called to set the total per-cycle reputation reward, which will be split between all miners."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Can only be called by the MetaColony.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The CLNY awarded per mining cycle to the miners")))),(0,r.kt)("h3",{id:"-setreputationroothashbytes32-newhash-uint256-newnleaves-address-memory-stakers"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setReputationRootHash(bytes32 newHash, uint256 newNLeaves, address[] memory stakers)"))),(0,r.kt)("p",null,"Set a new Reputation root hash and starts a new mining cycle. Can only be called by the ReputationMiningCycle contract."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newHash"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"The reputation root hash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newNLeaves"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"The updated leaves count value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stakers"),(0,r.kt)("td",{parentName:"tr",align:null},"address[]"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of users who submitted or backed the hash, being accepted here as the new reputation root hash")))),(0,r.kt)("h3",{id:"-settokenlockingaddress-_tokenlockingaddress"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setTokenLocking(address _tokenLockingAddress)"))),(0,r.kt)("p",null,"Sets the token locking address. This is only set once, and can't be changed afterwards."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_tokenLockingAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the locking contract")))),(0,r.kt)("h3",{id:"-setupregistraraddress-_ens-bytes32-_rootnode"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"setupRegistrar(address _ens, bytes32 _rootNode)"))),(0,r.kt)("p",null,"Setup registrar with ENS and root node."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_ens"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of ENS registrar")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_rootNode"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"Namehash of the root node for the domain")))),(0,r.kt)("h3",{id:"-stakeformininguint256-_amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"stakeForMining(uint256 _amount)"))),(0,r.kt)("p",null,"Stake CLNY to allow the staker to participate in reputation mining."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of CLNY to stake for the purposes of mining")))),(0,r.kt)("h3",{id:"-startnextcycle"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"startNextCycle()"))),(0,r.kt)("p",null,"Starts a new Reputation Mining cycle. Explicitly called only the first time, subsequently called from within ",(0,r.kt)("inlineCode",{parentName:"p"},"setReputationRootHash"),"."),(0,r.kt)("h3",{id:"-starttokenauctionaddress-_token"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"startTokenAuction(address _token)"))),(0,r.kt)("p",null,"Create and start a new ",(0,r.kt)("inlineCode",{parentName:"p"},"DutchAuction")," for the entire amount of ",(0,r.kt)("inlineCode",{parentName:"p"},"_token")," owned by the Colony Network."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_token"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the token held by the network to be auctioned")))),(0,r.kt)("h3",{id:"-supportsinterfacebytes4-interfaceidbool-status"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"supportsInterface(bytes4 interfaceID):bool status"))),(0,r.kt)("p",null,"Query if a contract implements an interface"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Interface identification is specified in ERC-165.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"interfaceID"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes4"),(0,r.kt)("td",{parentName:"tr",align:null},"The interface identifier, as specified in ERC-165")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"status"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")," if the contract implements ",(0,r.kt)("inlineCode",{parentName:"td"},"interfaceID"))))),(0,r.kt)("h3",{id:"-uninstallextensionbytes32-extensionid"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"uninstallExtension(bytes32 extensionId)"))),(0,r.kt)("p",null,"Uninstall an extension in a colony. Can only be called by a Colony."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")))),(0,r.kt)("h3",{id:"-unstakeformininguint256-_amount"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"unstakeForMining(uint256 _amount)"))),(0,r.kt)("p",null,"Unstake CLNY currently staked for reputation mining."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of CLNY staked for mining to unstake")))),(0,r.kt)("h3",{id:"-updatecolonyorbitdbstring-memory-orbitdb"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateColonyOrbitDB(string memory orbitdb)"))),(0,r.kt)("p",null,"Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orbitdb"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the orbitDB database to be associated with the colony")))),(0,r.kt)("h3",{id:"-updateuserorbitdbstring-memory-orbitdb"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"updateUserOrbitDB(string memory orbitdb)"))),(0,r.kt)("p",null,"Update a user's orbitdb address. Can only be called by a user with a registered subdomain"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"orbitdb"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the orbitDB database to be associated with the user")))),(0,r.kt)("h3",{id:"-upgradeextensionbytes32-extensionid-uint256-newversion"},"\u25b8 ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"upgradeExtension(bytes32 extensionId, uint256 newVersion)"))),(0,r.kt)("p",null,"Upgrade an extension in a colony. Can only be called by a Colony."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extensionId"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,r.kt)("td",{parentName:"tr",align:null},"keccak256 hash of the extension name, used as an indentifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newVersion"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the extension to upgrade to (must be one greater than current)")))))}k.isMDXComponent=!0}}]);