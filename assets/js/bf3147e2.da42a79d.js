"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7525],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?o.createElement(y,s(s({ref:n},u),{},{components:t})):o.createElement(y,s({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9722:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={description:"Now we govern our DAO.",sidebar_position:4},s="\ud83e\udde9 Lazy Consensus Extension",i={unversionedId:"use/governance/motions-and-disputes/index",id:"use/governance/motions-and-disputes/index",title:"\ud83e\udde9 Lazy Consensus Extension",description:"Now we govern our DAO.",source:"@site/colony/use/governance/motions-and-disputes/index.md",sourceDirName:"use/governance/motions-and-disputes",slug:"/use/governance/motions-and-disputes/",permalink:"/use/governance/motions-and-disputes/",draft:!1,editUrl:"https://github.com/JoinColony/docs/edit/main/colony/use/governance/motions-and-disputes/index.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Now we govern our DAO.",sidebar_position:4},sidebar:"use",previous:{title:"Governance",permalink:"/use/governance/"},next:{title:"Installation",permalink:"/use/governance/motions-and-disputes/installation"}},c={},l=[{value:"The Lazy Consensus Process",id:"the-lazy-consensus-process",level:3}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-lazy-consensus-extension"},"\ud83e\udde9 Lazy Consensus Extension"),(0,r.kt)("p",null,"The Lazy Consensus extension serves as the core of your DAO governance. This extension allows any member of your colony to propose a ",(0,r.kt)("em",{parentName:"p"},"Motion")," to take an ",(0,r.kt)("em",{parentName:"p"},"Action")," that will pass after a security delay unless somebody ",(0,r.kt)("em",{parentName:"p"},"Objects"),". This applies to all Actions, such as creating an expenditure, managing funds, or managing teams."),(0,r.kt)("p",null,"The Lazy Consensus model was designed to make DAO decision-making as efficient and fair as possible. Early iterations of DAO governance models had members vote on every single decision, which is incredibly inefficient. In a colony, a vote only needs to be triggered if there is a disagreement. If there are no objections, a proposed action can go through without the need for a governance vote. "),(0,r.kt)("h3",{id:"the-lazy-consensus-process"},"The Lazy Consensus Process"),(0,r.kt)("p",null,"How it works:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A DAO member creates a Motion to carry out an action such as, \u201cPay Alice 100 xDAI\u201d"),(0,r.kt)("li",{parentName:"ul"},"A staking period begins, where the colony\u2019s native tokens are used to back the Motion"),(0,r.kt)("li",{parentName:"ul"},"If the Motion has been adequately staked and no objections are raised, it passes and is executed automatically"),(0,r.kt)("li",{parentName:"ul"},"If someone objects to the Motion, they can raise an objection and trigger a reputation-weighted governance vote"),(0,r.kt)("li",{parentName:"ul"},"DAO members who vote can be awarded a portion of the staked tokens after voting concludes")),(0,r.kt)("p",null,"For more on the rationale behind Lazy Consensus, see ",(0,r.kt)("a",{parentName:"p",href:"/learn/governance/lazy-consensus"},(0,r.kt)("strong",{parentName:"a"},"this page")),"."))}p.isMDXComponent=!0}}]);