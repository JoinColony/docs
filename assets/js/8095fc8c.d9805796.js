"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7873],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),y=c(n),u=r,f=y["".concat(l,".").concat(u)]||y[u]||p[u]||a;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},6791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={id:"index",sidebar_position:1},i="ColonyJS",s={unversionedId:"colonyjs/index",id:"colonyjs/index",title:"ColonyJS",description:"colonyJS is a TypeScript library with a simple and predictable interface for application-layer integrations with the colonyNetwork smart contracts. To learn more about Colony, you can visit colony.io or read the White Paper.",source:"@site/docs/colonyjs/index.md",sourceDirName:"colonyjs",slug:"/colonyjs/",permalink:"/docs/colonyjs/",draft:!1,editUrl:"https://github.com/JoinColony/colonyJS/edit/main/docs/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"index",sidebar_position:1},sidebar:"sidebar",previous:{title:"EventSources",permalink:"/docs/colonysdk/api/interfaces/EventSources"},next:{title:"Guides",permalink:"/docs/colonyjs/guides/"}},l={},c=[{value:"Getting started",id:"getting-started",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"colonyjs"},"ColonyJS"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/JoinColony/brand/v1.0.0/logo_js.svg",alt:null})),(0,r.kt)("p",null,"colonyJS is a TypeScript library with a simple and predictable interface for application-layer integrations with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/JoinColony/colonyNetwork"},"colonyNetwork")," smart contracts. To learn more about Colony, you can visit ",(0,r.kt)("a",{parentName:"p",href:"https://colony.io/"},"colony.io")," or read the ",(0,r.kt)("a",{parentName:"p",href:"https://colony.io/whitepaper.pdf"},"White Paper"),"."),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { providers, utils, Wallet } from 'ethers';\nimport { getColonyNetworkClient, Id, Network, Tokens } from '@colony/colony-js';\n\nconst { formatEther } = utils;\n\nconst provider = new providers.JsonRpcProvider('https://xdai.colony.io/rpc2/');\n\nconst start = async () => {\n  // Get a wallet instance\n  const wallet = new Wallet(\n    // This is a random private key (don't use this one for anything else and _definitely_ do not send valuables to the corresponding address)\n    '0x0355596cdb5e5242ad082c4fe3f8bbe48c9dba843fe1f99dd8272f487e70efae',\n    provider,\n  );\n\n  // Check out the logs to see the wallet address\n  console.log('Wallet Address:', wallet.address);\n\n  // Get a network client instance for Gnosis Chain\n  const networkClient = await getColonyNetworkClient(\n    Network.Gnosis,\n    wallet,\n  );\n\n  // Let's connect to the Meta Colony\n  const metaColonyClient = await networkClient.getMetaColonyClient()\n  // And check out it's CLNY funding\n  const funding = await metaColonyClient.getFundingPotBalance(Id.RootPot, Tokens.Gnosis.CLNY);\n  // We can also see its address\n  const { address } = metaColonyClient;\n  console.info(`${formatEther(funding)} CLNY in root domain of MetaColony with address: ${address}`);\n};\n\nstart();\n")))}p.isMDXComponent=!0}}]);