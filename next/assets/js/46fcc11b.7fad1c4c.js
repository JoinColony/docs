"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72886],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>s});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function d(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},l=Object.keys(t);for(o=0;o<l.length;o++)n=l[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(o=0;o<l.length;o++)n=l[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var r=o.createContext({}),c=function(t){var e=o.useContext(r),n=e;return t&&(n="function"==typeof t?t(e):d(d({},e),t)),n},p=function(t){var e=c(t.components);return o.createElement(r.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,r=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=c(n),s=a,y=m["".concat(r,".").concat(s)]||m[s]||u[s]||l;return n?o.createElement(y,d(d({ref:e},p),{},{components:n})):o.createElement(y,d({ref:e},p))}));function s(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,d=new Array(l);d[0]=m;var i={};for(var r in e)hasOwnProperty.call(e,r)&&(i[r]=e[r]);i.originalType=t,i.mdxType="string"==typeof t?t:a,d[1]=i;for(var c=2;c<l;c++)d[c]=n[c];return o.createElement.apply(null,d)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80092:(t,e,n)=>{n.r(e),n.d(e,{Badge:()=>m,Bullet:()=>p,Details:()=>y,SpecifiedBy:()=>u,assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>d,metadata:()=>r,toc:()=>s});var o=n(87462),a=n(67294),l=n(3905);const d={id:"model-colony-metadata-condition-input",title:"ModelColonyMetadataConditionInput",hide_table_of_contents:!1},i=void 0,r={unversionedId:"graphql/inputs/model-colony-metadata-condition-input",id:"graphql/inputs/model-colony-metadata-condition-input",title:"ModelColonyMetadataConditionInput",description:"No description",source:"@site/colony/graphql/inputs/model-colony-metadata-condition-input.mdx",sourceDirName:"graphql/inputs",slug:"/graphql/inputs/model-colony-metadata-condition-input",permalink:"/next/graphql/inputs/model-colony-metadata-condition-input",draft:!1,editUrl:"https://github.com/JoinColony/docs/edit/main/colony/graphql/inputs/model-colony-metadata-condition-input.mdx",tags:[],version:"current",frontMatter:{id:"model-colony-metadata-condition-input",title:"ModelColonyMetadataConditionInput",hide_table_of_contents:!1},sidebar:"schemaSidebar",previous:{title:"ModelColonyFundsClaimFilterInput",permalink:"/next/graphql/inputs/model-colony-funds-claim-filter-input"},next:{title:"ModelColonyMetadataFilterInput",permalink:"/next/graphql/inputs/model-colony-metadata-filter-input"}},c={},p=()=>(0,l.kt)(a.Fragment,null,(0,l.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=t=>(0,l.kt)(a.Fragment,null,"Specification",(0,l.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:t.url,title:"Specified by "+t.url},"\u2398")),m=t=>(0,l.kt)(a.Fragment,null,(0,l.kt)("span",{className:"badge badge--"+t.class},t.text)),s=[{value:"Fields",id:"fields",level:3},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyMetadataConditionInput.<b>displayName</b></code><Bullet /><code>ModelStringInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbdisplaynamebcodemodelstringinput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyMetadataConditionInput.<b>avatar</b></code><Bullet /><code>ModelStringInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbavatarbcodemodelstringinput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyMetadataConditionInput.<b>thumbnail</b></code><Bullet /><code>ModelStringInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbthumbnailbcodemodelstringinput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyMetadataConditionInput.<b>and</b></code><Bullet /><code>[ModelColonyMetadataConditionInput]</code> <Badge class="secondary" text="list"/> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbandbcodemodelcolonymetadataconditioninput--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyMetadataConditionInput.<b>or</b></code><Bullet /><code>[ModelColonyMetadataConditionInput]</code> <Badge class="secondary" text="list"/> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonymetadataconditioninputborbcodemodelcolonymetadataconditioninput--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyMetadataConditionInput.<b>not</b></code><Bullet /><code>ModelColonyMetadataConditionInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbnotbcodemodelcolonymetadataconditioninput-",level:4},{value:"Member of",id:"member-of",level:3}],y=t=>{let{dataOpen:e,dataClose:n,children:d,startOpen:i=!1}=t;const[r,c]=(0,a.useState)(i);return(0,l.kt)("details",(0,o.Z)({},r?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,l.kt)("summary",{onClick:t=>{t.preventDefault(),c((t=>!t))},style:{listStyle:"none"}},r?e:n),r&&d)},g={Bullet:p,SpecifiedBy:u,Badge:m,toc:s,Details:y};function f(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,o.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"No description"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"input ModelColonyMetadataConditionInput {\n  displayName: ModelStringInput\n  avatar: ModelStringInput\n  thumbnail: ModelStringInput\n  and: [ModelColonyMetadataConditionInput]\n  or: [ModelColonyMetadataConditionInput]\n  not: ModelColonyMetadataConditionInput\n}\n")),(0,l.kt)("h3",{id:"fields"},"Fields"),(0,l.kt)("h4",{id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbdisplaynamebcodemodelstringinput-"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyMetadataConditionInput.",(0,l.kt)("b",null,"displayName"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-string-input"},(0,l.kt)("inlineCode",{parentName:"a"},"ModelStringInput"))," ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h4",{id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbavatarbcodemodelstringinput-"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyMetadataConditionInput.",(0,l.kt)("b",null,"avatar"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-string-input"},(0,l.kt)("inlineCode",{parentName:"a"},"ModelStringInput"))," ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h4",{id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbthumbnailbcodemodelstringinput-"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyMetadataConditionInput.",(0,l.kt)("b",null,"thumbnail"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-string-input"},(0,l.kt)("inlineCode",{parentName:"a"},"ModelStringInput"))," ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h4",{id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbandbcodemodelcolonymetadataconditioninput--"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyMetadataConditionInput.",(0,l.kt)("b",null,"and"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-metadata-condition-input"},(0,l.kt)("inlineCode",{parentName:"a"},"[ModelColonyMetadataConditionInput]"))," ",(0,l.kt)(m,{class:"secondary",text:"list",mdxType:"Badge"})," ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h4",{id:"code-style-fontweight-normal-modelcolonymetadataconditioninputborbcodemodelcolonymetadataconditioninput--"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyMetadataConditionInput.",(0,l.kt)("b",null,"or"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-metadata-condition-input"},(0,l.kt)("inlineCode",{parentName:"a"},"[ModelColonyMetadataConditionInput]"))," ",(0,l.kt)(m,{class:"secondary",text:"list",mdxType:"Badge"})," ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h4",{id:"code-style-fontweight-normal-modelcolonymetadataconditioninputbnotbcodemodelcolonymetadataconditioninput-"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyMetadataConditionInput.",(0,l.kt)("b",null,"not"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-metadata-condition-input"},(0,l.kt)("inlineCode",{parentName:"a"},"ModelColonyMetadataConditionInput"))," ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h3",{id:"member-of"},"Member of"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/graphql/mutations/create-colony-metadata"},(0,l.kt)("inlineCode",{parentName:"a"},"createColonyMetadata")),"  ",(0,l.kt)(m,{class:"secondary",text:"mutation",mdxType:"Badge"}),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"p",href:"/graphql/mutations/delete-colony-metadata"},(0,l.kt)("inlineCode",{parentName:"a"},"deleteColonyMetadata")),"  ",(0,l.kt)(m,{class:"secondary",text:"mutation",mdxType:"Badge"}),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"p",href:"/graphql/inputs/model-colony-metadata-condition-input"},(0,l.kt)("inlineCode",{parentName:"a"},"ModelColonyMetadataConditionInput")),"  ",(0,l.kt)(m,{class:"secondary",text:"input",mdxType:"Badge"}),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"p",href:"/graphql/mutations/update-colony-metadata"},(0,l.kt)("inlineCode",{parentName:"a"},"updateColonyMetadata")),"  ",(0,l.kt)(m,{class:"secondary",text:"mutation",mdxType:"Badge"})))}f.isMDXComponent=!0}}]);