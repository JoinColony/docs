"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[47780],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,k=u["".concat(i,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(k,l(l({ref:t},s),{},{components:n})):o.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},37986:(e,t,n)=>{n.r(t),n.d(t,{Badge:()=>u,Bullet:()=>s,Details:()=>k,SpecifiedBy:()=>d,assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var o=n(87462),a=n(67294),r=n(3905);const l={id:"token-type",title:"TokenType",hide_table_of_contents:!1},p=void 0,i={unversionedId:"graphql/enums/token-type",id:"graphql/enums/token-type",title:"TokenType",description:"Variants of different token types a Colony can use.",source:"@site/colony/graphql/enums/token-type.mdx",sourceDirName:"graphql/enums",slug:"/graphql/enums/token-type",permalink:"/next/graphql/enums/token-type",draft:!1,editUrl:"https://github.com/JoinColony/docs/edit/main/colony/graphql/enums/token-type.mdx",tags:[],version:"current",frontMatter:{id:"token-type",title:"TokenType",hide_table_of_contents:!1},sidebar:"schemaSidebar",previous:{title:"SortingMethod",permalink:"/next/graphql/enums/sorting-method"},next:{title:"Schema Documentation",permalink:"/next/graphql"}},c={},s=()=>(0,r.kt)(a.Fragment,null,(0,r.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),d=e=>(0,r.kt)(a.Fragment,null,"Specification",(0,r.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),u=e=>(0,r.kt)(a.Fragment,null,(0,r.kt)("span",{className:"badge badge--"+e.class},e.text)),m=[{value:"Values",id:"values",level:3},{value:"<code style={{ fontWeight: 'normal' }}>TokenType.<b>COLONY</b></code>",id:"code-style-fontweight-normal-tokentypebcolonybcode",level:4},{value:"<code style={{ fontWeight: 'normal' }}>TokenType.<b>ERC20</b></code>",id:"code-style-fontweight-normal-tokentypeberc20bcode",level:4},{value:"<code style={{ fontWeight: 'normal' }}>TokenType.<b>CHAIN_NATIVE</b></code>",id:"code-style-fontweight-normal-tokentypebchain_nativebcode",level:4},{value:"Member of",id:"member-of",level:3}],k=e=>{let{dataOpen:t,dataClose:n,children:l,startOpen:p=!1}=e;const[i,c]=(0,a.useState)(p);return(0,r.kt)("details",(0,o.Z)({},i?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,r.kt)("summary",{onClick:e=>{e.preventDefault(),c((e=>!e))},style:{listStyle:"none"}},i?t:n),i&&l)},y={Bullet:s,SpecifiedBy:d,Badge:u,toc:m,Details:k};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Variants of different token types a Colony can use.\nAs Colonies can use multiple tokens and even own tokens (BYOT), we need to differentiate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"enum TokenType {\n  COLONY\n  ERC20\n  CHAIN_NATIVE\n}\n")),(0,r.kt)("h3",{id:"values"},"Values"),(0,r.kt)("h4",{id:"code-style-fontweight-normal-tokentypebcolonybcode"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"TokenType.",(0,r.kt)("b",null,"COLONY")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A (ERC20-compatible) token that was deployed with Colony. It has a few more features, like minting through the Colony itself")),(0,r.kt)("h4",{id:"code-style-fontweight-normal-tokentypeberc20bcode"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"TokenType.",(0,r.kt)("b",null,"ERC20")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"An ERC20-compatible token")),(0,r.kt)("h4",{id:"code-style-fontweight-normal-tokentypebchain_nativebcode"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"TokenType.",(0,r.kt)("b",null,"CHAIN_NATIVE")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The native token of the Chain used (e.g. ETH on mainnet or xDAI on Gnosis-Chain)")),(0,r.kt)("h3",{id:"member-of"},"Member of"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/graphql/inputs/create-token-input"},(0,r.kt)("inlineCode",{parentName:"a"},"CreateTokenInput")),"  ",(0,r.kt)(u,{class:"secondary",text:"input",mdxType:"Badge"}),(0,r.kt)(s,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"p",href:"/graphql/queries/get-tokens-by-type"},(0,r.kt)("inlineCode",{parentName:"a"},"getTokensByType")),"  ",(0,r.kt)(u,{class:"secondary",text:"query",mdxType:"Badge"}),(0,r.kt)(s,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"p",href:"/graphql/inputs/model-token-type-input"},(0,r.kt)("inlineCode",{parentName:"a"},"ModelTokenTypeInput")),"  ",(0,r.kt)(u,{class:"secondary",text:"input",mdxType:"Badge"}),(0,r.kt)(s,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"p",href:"/graphql/objects/token"},(0,r.kt)("inlineCode",{parentName:"a"},"Token")),"  ",(0,r.kt)(u,{class:"secondary",text:"object",mdxType:"Badge"}),(0,r.kt)(s,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"p",href:"/graphql/inputs/update-token-input"},(0,r.kt)("inlineCode",{parentName:"a"},"UpdateTokenInput")),"  ",(0,r.kt)(u,{class:"secondary",text:"input",mdxType:"Badge"})))}f.isMDXComponent=!0}}]);