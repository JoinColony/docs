"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[85591],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>m});var n=a(67294);function o(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function r(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){o(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function d(t,e){if(null==t)return{};var a,n,o=function(t,e){if(null==t)return{};var a,n,o={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(o[a]=t[a]);return o}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(o[a]=t[a])}return o}var i=n.createContext({}),c=function(t){var e=n.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):r(r({},e),t)),a},p=function(t){var e=c(t.components);return n.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},s=n.forwardRef((function(t,e){var a=t.components,o=t.mdxType,l=t.originalType,i=t.parentName,p=d(t,["components","mdxType","originalType","parentName"]),s=c(a),m=o,y=s["".concat(i,".").concat(m)]||s[m]||u[m]||l;return a?n.createElement(y,r(r({ref:e},p),{},{components:a})):n.createElement(y,r({ref:e},p))}));function m(t,e){var a=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var l=a.length,r=new Array(l);r[0]=s;var d={};for(var i in e)hasOwnProperty.call(e,i)&&(d[i]=e[i]);d.originalType=t,d.mdxType="string"==typeof t?t:o,r[1]=d;for(var c=2;c<l;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},79659:(t,e,a)=>{a.r(e),a.d(e,{Badge:()=>s,Bullet:()=>p,Details:()=>y,SpecifiedBy:()=>u,assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var n=a(87462),o=a(67294),l=a(3905);const r={id:"update-colony-metadata",title:"updateColonyMetadata",hide_table_of_contents:!1},d=void 0,i={unversionedId:"graphql/mutations/update-colony-metadata",id:"graphql/mutations/update-colony-metadata",title:"updateColonyMetadata",description:"No description",source:"@site/colony/graphql/mutations/update-colony-metadata.mdx",sourceDirName:"graphql/mutations",slug:"/graphql/mutations/update-colony-metadata",permalink:"/next/graphql/mutations/update-colony-metadata",draft:!1,editUrl:"https://github.com/JoinColony/docs/edit/main/colony/graphql/mutations/update-colony-metadata.mdx",tags:[],version:"current",frontMatter:{id:"update-colony-metadata",title:"updateColonyMetadata",hide_table_of_contents:!1},sidebar:"schemaSidebar",previous:{title:"updateColonyFundsClaim",permalink:"/next/graphql/mutations/update-colony-funds-claim"},next:{title:"updateColonyTokens",permalink:"/next/graphql/mutations/update-colony-tokens"}},c={},p=()=>(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=t=>(0,l.kt)(o.Fragment,null,"Specification",(0,l.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:t.url,title:"Specified by "+t.url},"\u2398")),s=t=>(0,l.kt)(o.Fragment,null,(0,l.kt)("span",{className:"badge badge--"+t.class},t.text)),m=[{value:"Arguments",id:"arguments",level:3},{value:'<code style={{ fontWeight: \'normal\' }}>updateColonyMetadata.<b>input</b></code><Bullet /><code>UpdateColonyMetadataInput!</code> <Badge class="secondary" text="non-null"/> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-updatecolonymetadatabinputbcodeupdatecolonymetadatainput--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>updateColonyMetadata.<b>condition</b></code><Bullet /><code>ModelColonyMetadataConditionInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-updatecolonymetadatabconditionbcodemodelcolonymetadataconditioninput-",level:4},{value:"Type",id:"type",level:3},{value:'<code>ColonyMetadata</code> <Badge class="secondary" text="object"/>',id:"colonymetadata-",level:4}],y=t=>{let{dataOpen:e,dataClose:a,children:r,startOpen:d=!1}=t;const[i,c]=(0,o.useState)(d);return(0,l.kt)("details",(0,n.Z)({},i?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,l.kt)("summary",{onClick:t=>{t.preventDefault(),c((t=>!t))},style:{listStyle:"none"}},i?e:a),i&&r)},f={Bullet:p,SpecifiedBy:u,Badge:s,toc:m,Details:y};function g(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},f,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"No description"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"updateColonyMetadata(\n  input: UpdateColonyMetadataInput!\n  condition: ModelColonyMetadataConditionInput\n): ColonyMetadata\n")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("h4",{id:"code-style-fontweight-normal-updatecolonymetadatabinputbcodeupdatecolonymetadatainput--"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"updateColonyMetadata.",(0,l.kt)("b",null,"input"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/update-colony-metadata-input"},(0,l.kt)("inlineCode",{parentName:"a"},"UpdateColonyMetadataInput!"))," ",(0,l.kt)(s,{class:"secondary",text:"non-null",mdxType:"Badge"})," ",(0,l.kt)(s,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h4",{id:"code-style-fontweight-normal-updatecolonymetadatabconditionbcodemodelcolonymetadataconditioninput-"},(0,l.kt)("a",{parentName:"h4",href:"#"},(0,l.kt)("code",{style:{fontWeight:"normal"}},"updateColonyMetadata.",(0,l.kt)("b",null,"condition"))),(0,l.kt)(p,{mdxType:"Bullet"}),(0,l.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-metadata-condition-input"},(0,l.kt)("inlineCode",{parentName:"a"},"ModelColonyMetadataConditionInput"))," ",(0,l.kt)(s,{class:"secondary",text:"input",mdxType:"Badge"})),(0,l.kt)("blockquote",null),(0,l.kt)("h3",{id:"type"},"Type"),(0,l.kt)("h4",{id:"colonymetadata-"},(0,l.kt)("a",{parentName:"h4",href:"/graphql/objects/colony-metadata"},(0,l.kt)("inlineCode",{parentName:"a"},"ColonyMetadata"))," ",(0,l.kt)(s,{class:"secondary",text:"object",mdxType:"Badge"})),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Represents metadata for a Colony.")))}g.isMDXComponent=!0}}]);