"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[86164],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>s});var o=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var r=o.createContext({}),c=function(e){var t=o.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(r.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),y=c(n),s=l,m=y["".concat(r,".").concat(s)]||y[s]||u[s]||i;return n?o.createElement(m,d(d({ref:t},p),{},{components:n})):o.createElement(m,d({ref:t},p))}));function s(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,d=new Array(i);d[0]=y;var a={};for(var r in t)hasOwnProperty.call(t,r)&&(a[r]=t[r]);a.originalType=e,a.mdxType="string"==typeof e?e:l,d[1]=a;for(var c=2;c<i;c++)d[c]=n[c];return o.createElement.apply(null,d)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},13058:(e,t,n)=>{n.r(t),n.d(t,{Badge:()=>y,Bullet:()=>p,Details:()=>m,SpecifiedBy:()=>u,assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>d,metadata:()=>r,toc:()=>s});var o=n(87462),l=n(67294),i=n(3905);const d={id:"model-colony-condition-input",title:"ModelColonyConditionInput",hide_table_of_contents:!1},a=void 0,r={unversionedId:"graphql/inputs/model-colony-condition-input",id:"graphql/inputs/model-colony-condition-input",title:"ModelColonyConditionInput",description:"No description",source:"@site/colony/graphql/inputs/model-colony-condition-input.mdx",sourceDirName:"graphql/inputs",slug:"/graphql/inputs/model-colony-condition-input",permalink:"/next/graphql/inputs/model-colony-condition-input",draft:!1,editUrl:"https://github.com/JoinColony/docs/edit/main/colony/graphql/inputs/model-colony-condition-input.mdx",tags:[],version:"current",frontMatter:{id:"model-colony-condition-input",title:"ModelColonyConditionInput",hide_table_of_contents:!1},sidebar:"schemaSidebar",previous:{title:"ModelColonyActionTypeInput",permalink:"/next/graphql/inputs/model-colony-action-type-input"},next:{title:"ModelColonyExtensionConditionInput",permalink:"/next/graphql/inputs/model-colony-extension-condition-input"}},c={},p=()=>(0,i.kt)(l.Fragment,null,(0,i.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=e=>(0,i.kt)(l.Fragment,null,"Specification",(0,i.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),y=e=>(0,i.kt)(l.Fragment,null,(0,i.kt)("span",{className:"badge badge--"+e.class},e.text)),s=[{value:"Fields",id:"fields",level:3},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>name</b></code><Bullet /><code>ModelStringInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputbnamebcodemodelstringinput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>type</b></code><Bullet /><code>ModelColonyTypeInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputbtypebcodemodelcolonytypeinput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>version</b></code><Bullet /><code>ModelIntInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputbversionbcodemodelintinput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>and</b></code><Bullet /><code>[ModelColonyConditionInput]</code> <Badge class="secondary" text="list"/> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputbandbcodemodelcolonyconditioninput--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>or</b></code><Bullet /><code>[ModelColonyConditionInput]</code> <Badge class="secondary" text="list"/> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputborbcodemodelcolonyconditioninput--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>not</b></code><Bullet /><code>ModelColonyConditionInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputbnotbcodemodelcolonyconditioninput-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>ModelColonyConditionInput.<b>colonyNativeTokenId</b></code><Bullet /><code>ModelIDInput</code> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-modelcolonyconditioninputbcolonynativetokenidbcodemodelidinput-",level:4},{value:"Member of",id:"member-of",level:3}],m=e=>{let{dataOpen:t,dataClose:n,children:d,startOpen:a=!1}=e;const[r,c]=(0,l.useState)(a);return(0,i.kt)("details",(0,o.Z)({},r?{open:!0}:{},{className:"details",style:{border:"none",boxShadow:"none",background:"var(--ifm-background-color)"}}),(0,i.kt)("summary",{onClick:e=>{e.preventDefault(),c((e=>!e))},style:{listStyle:"none"}},r?t:n),r&&d)},k={Bullet:p,SpecifiedBy:u,Badge:y,toc:s,Details:m};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"No description"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"input ModelColonyConditionInput {\n  name: ModelStringInput\n  type: ModelColonyTypeInput\n  version: ModelIntInput\n  and: [ModelColonyConditionInput]\n  or: [ModelColonyConditionInput]\n  not: ModelColonyConditionInput\n  colonyNativeTokenId: ModelIDInput\n}\n")),(0,i.kt)("h3",{id:"fields"},"Fields"),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputbnamebcodemodelstringinput-"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"name"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-string-input"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelStringInput"))," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputbtypebcodemodelcolonytypeinput-"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"type"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-type-input"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelColonyTypeInput"))," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputbversionbcodemodelintinput-"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"version"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-int-input"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelIntInput"))," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputbandbcodemodelcolonyconditioninput--"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"and"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-condition-input"},(0,i.kt)("inlineCode",{parentName:"a"},"[ModelColonyConditionInput]"))," ",(0,i.kt)(y,{class:"secondary",text:"list",mdxType:"Badge"})," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputborbcodemodelcolonyconditioninput--"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"or"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-condition-input"},(0,i.kt)("inlineCode",{parentName:"a"},"[ModelColonyConditionInput]"))," ",(0,i.kt)(y,{class:"secondary",text:"list",mdxType:"Badge"})," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputbnotbcodemodelcolonyconditioninput-"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"not"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-colony-condition-input"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelColonyConditionInput"))," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h4",{id:"code-style-fontweight-normal-modelcolonyconditioninputbcolonynativetokenidbcodemodelidinput-"},(0,i.kt)("a",{parentName:"h4",href:"#"},(0,i.kt)("code",{style:{fontWeight:"normal"}},"ModelColonyConditionInput.",(0,i.kt)("b",null,"colonyNativeTokenId"))),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"h4",href:"/graphql/inputs/model-idinput"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelIDInput"))," ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"})),(0,i.kt)("blockquote",null),(0,i.kt)("h3",{id:"member-of"},"Member of"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/graphql/mutations/create-colony"},(0,i.kt)("inlineCode",{parentName:"a"},"createColony")),"  ",(0,i.kt)(y,{class:"secondary",text:"mutation",mdxType:"Badge"}),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"p",href:"/graphql/mutations/delete-colony"},(0,i.kt)("inlineCode",{parentName:"a"},"deleteColony")),"  ",(0,i.kt)(y,{class:"secondary",text:"mutation",mdxType:"Badge"}),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"p",href:"/graphql/inputs/model-colony-condition-input"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelColonyConditionInput")),"  ",(0,i.kt)(y,{class:"secondary",text:"input",mdxType:"Badge"}),(0,i.kt)(p,{mdxType:"Bullet"}),(0,i.kt)("a",{parentName:"p",href:"/graphql/mutations/update-colony"},(0,i.kt)("inlineCode",{parentName:"a"},"updateColony")),"  ",(0,i.kt)(y,{class:"secondary",text:"mutation",mdxType:"Badge"})))}f.isMDXComponent=!0}}]);